# Multi-Server Configuration Demo
# Demonstrates: Multiple ports, virtual hosting, duplicate port handling

# ============================================
# Server 1: Main website on port 8080
# ============================================
server {
    listen 8080;
    server_name localhost www.localhost;
    root ./www/html;
    index index.html;
    client_max_body_size 10m;

    error_page 404 /404.html;

    # Main site content
    location / {
        root ./www/html;
        index index.html;
        allow_methods GET POST;
    }

    # Static images
    location /images/ {
        root ./www;
        # index ecole42.jpeg;
        autoindex on;
        allow_methods GET;
    }

    # File uploads
    location /upload/ {
        root ./www;
        autoindex on;
        allow_methods GET POST DELETE;
        client_max_body_size 50m;
    }

    # CGI test scripts
    location /cgi-bin/ {
        root ./www;
        cgi .py /usr/bin/python3;
    }

    # Python CGI scripts
    location /python/ {
        root ./www;
        cgi .py /usr/bin/python3;
        allow_methods GET POST;
    }

    # Shell scripts
    location /shell/ {
        root ./www;
        cgi .sh /bin/bash;
        allow_methods GET;
    }

    # PHP scripts
    location /php/ {
        root ./www;
        cgi .php /usr/bin/php-cgi;
        allow_methods GET POST;
    }

    # redirect
    location /redirect/ {
        return 301 https://42.fr/en/homepage/;
    }
}

# ============================================
# Server 2: Image gallery on port 8081
# ============================================
server {
    listen 8081;
    server_name gallery.localhost;
    root ./www/images;

    location / {
        root ./www/images;
        autoindex on;
        allow_methods GET;
    }
}

# ============================================
# Server 3: CGI playground on port 8082
# ============================================
server {
    listen 8082;
    server_name cgi.localhost;
    root ./www/python;
    index visitor_counter.py;

    # Python CGI scripts
    location / {
        root ./www/python;
        cgi .py /usr/bin/python3;
        allow_methods GET POST;
    }

    # Redirect to main site
    location /redirect/ {
        return 301 http://localhost:8080/;
    }
}

# ============================================
# TESTING GUIDE
# ============================================
#
# 1. Start server with this config:
#    ./webserv config/multi_server.conf
#
# 2. Test different servers by port:
#    curl http://localhost:8080/              # Main site (index.html)
#    curl http://localhost:8081/              # Image gallery (directory listing)
#    curl http://localhost:8082/              # CGI playground (visitor counter)
#
# 3. Test virtual hosting on same port:
#    curl http://localhost:8080/              # Returns www/html/index.html
#    curl -H "Host: api.localhost" http://localhost:8080/  # Returns CGI httpbin
#
# 4. Test specific features:
#    # Python CGI
#    curl http://localhost:8080/python/visitor_counter.py
#    curl http://localhost:8082/
#
#    # Image gallery
#    curl http://localhost:8081/
#
#    # File upload
#    curl -X POST -F "file=@test.txt" http://localhost:8080/upload/
#
#    # Shell scripts
#    curl http://localhost:8080/shell/system_info.sh
#
#    # PHP info
#    curl http://localhost:8080/php/info.php
#
#    # Redirect test
#    curl -I http://localhost:8082/redirect/
#
# 5. Browser testing:
#    - http://localhost:8080/           -> Main site
#    - http://localhost:8080/images/    -> Image directory listing
#    - http://localhost:8080/upload/    -> Upload directory
#    - http://localhost:8081/           -> Image gallery
#    - http://localhost:8082/           -> Visitor counter
#
# 6. Virtual host testing in browser:
#    Add to /etc/hosts:
#      127.0.0.1 api.localhost
#    Then visit: http://api.localhost:8080/
#
# ============================================
# DUPLICATE PORT TEST (Should fail)
# ============================================
# Uncomment this block to test duplicate port handling:
# This should cause server initialization to fail with error
#
# server {
#     listen 8080;
#     server_name duplicate.localhost;
#     root ./www;
# }
#
# Expected behavior: Server should detect duplicate port 8080
# and refuse to start (or bind() will fail)

# ============================================
# MULTIPLE SERVER INSTANCES (Should fail)
# ============================================
# To test launching multiple webserv processes:
#
# Terminal 1:
#   ./webserv config/multi_server.conf
#
# Terminal 2:
#   ./webserv config/default.conf  # Also uses port 8080
#
# Expected: Second server fails with "Address already in use"
# Reason: OS prevents multiple processes from binding same port
